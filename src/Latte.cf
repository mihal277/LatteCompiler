-- programs ------------------------------------------------

entrypoints Program ;

Program.   Program ::= [TopDef] ;

FnDef.	   TopDef ::= Type Ident "(" [Arg] ")" Block ;

ClassDef.  TopDef ::= ClassHeader "{" [ClassField] "}" ;

StructDef.  TopDef ::= StructHeader "{" [StructField] "}" ;

separator nonempty TopDef "" ;

Arg.       Arg ::= Type Ident;

separator  Arg "," ;

-- classes -------------------------------------------------

ClassDec.        ClassHeader ::= "class" UIdent ;

ClassDecExt.     ClassHeader ::= "class" UIdent "extends" Type ;

ClassFieldVar.   ClassField ::= Type [Item] ";" ; 

ClassFieldMeth.  ClassField ::= TopDef ;

separator        ClassField "" ;

-- structs -------------------------------------------------

StructDec.       StructHeader ::= "class" Ident ;

StructField.     StructField ::= Type [Item] ";" ; 

separator        StructField "" ;

-- statements ----------------------------------------------

Block.     Block ::= "{" [Stmt] "}" ;

separator  Stmt "" ;

Empty.     Stmt ::= ";" ;

BStmt.     Stmt ::= Block ;

Decl.      Stmt ::= Type [Item] ";" ;

NoInit.    Item ::= Ident ; 

Init.      Item ::= Ident "=" Expr ;

separator nonempty Item "," ;

Ass.       Stmt ::= Ident "=" Expr  ";" ;

ArrAss.    Stmt ::= Ident DimExpr "=" Expr  ";" ;

StructAss. Stmt ::= Ident "." Ident "=" Expr  ";" ;

Incr.      Stmt ::= Ident "++"  ";" ;

Decr.      Stmt ::= Ident "--"  ";" ;

Ret.       Stmt ::= "return" Expr ";" ;

VRet.      Stmt ::= "return" ";" ;

Cond.      Stmt ::= "if" "(" Expr ")" Stmt  ;

CondElse.  Stmt ::= "if" "(" Expr ")" Stmt "else" Stmt  ;

While.     Stmt ::= "while" "(" Expr ")" Stmt ;

For.       Stmt ::= "for" "(" Type Ident ":" Ident ")" Stmt ;

SExp.      Stmt ::= Expr  ";" ;

-- Types ---------------------------------------------------

Int.       Type ::= "int" ;

Str.       Type ::= "string" ;

Bool.      Type ::= "boolean" ;

Void.      Type ::= "void" ;

Arr.       Type ::= Type "[]" ;

Class.     Type ::= UIdent ;

Struct.    Type ::= Ident ;

internal   Fun. Type ::= Type "(" [Type] ")" ;

separator  Type "," ;

-- Expressions ---------------------------------------------

EVar.      Expr6 ::= Ident ;

ELitInt.   Expr6 ::= Integer ;

ELitTrue.  Expr6 ::= "true" ;

ELitFalse. Expr6 ::= "false" ;

EApp.      Expr6 ::= Ident "(" [Expr] ")" ;

EAppMeth.  Expr6 ::= Ident "." Ident "(" [Expr] ")" ;

EObjVar.   Expr6 ::= Ident "." Ident ;

ENewArr.   Expr6 ::= "new" Type DimExpr;

ENewObj.   Expr6 ::= "new" UIdent;

ENewSObj.  Expr6 ::= "new" Ident;

EArrElem.  Expr6 ::= Ident DimExpr;

EString.   Expr6 ::= String ;

ENullSim.  Expr6 ::= "(" Ident ")null" ;

ENullCl.   Expr6 ::= "(" UIdent ")null" ;

Neg.       Expr5 ::= "-" Expr6 ;

Not.       Expr5 ::= "!" Expr6 ;

EMul.      Expr4 ::= Expr4 MulOp Expr5 ;

EAdd.      Expr3 ::= Expr3 AddOp Expr4 ;

ERel.      Expr2 ::= Expr2 RelOp Expr3 ;

EAnd.      Expr1 ::= Expr2 "&&" Expr1 ;

EOr.       Expr ::= Expr1 "||" Expr ;

EDim.      DimExpr ::= "[" Expr "]" ;

coercions  Expr 6 ;

separator  Expr "," ;

-- operators -----------------------------------------------

Plus.      AddOp ::= "+" ;

Minus.     AddOp ::= "-" ;

Times.     MulOp ::= "*" ;

Div.       MulOp ::= "/" ;

Mod.       MulOp ::= "%" ;

LTH.       RelOp ::= "<" ;

LE.        RelOp ::= "<=" ;

GTH.       RelOp ::= ">" ;

GE.        RelOp ::= ">=" ;

EQU.       RelOp ::= "==" ;

NE.        RelOp ::= "!=" ;

-- comments ------------------------------------------------

comment    "#" ;

comment    "//" ;

comment    "/*" "*/" ;

-- additional tokens ---------------------------------------

token UIdent (upper (letter | digit | '_')*) ;


