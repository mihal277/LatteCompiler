

module AbsLatte where

-- Haskell module generated by the BNF converter




newtype PIdent = PIdent ((Int,Int),String)
  deriving (Eq, Ord, Show, Read)
newtype PUIdent = PUIdent ((Int,Int),String)
  deriving (Eq, Ord, Show, Read)
data Program = Program [TopDef]
  deriving (Eq, Ord, Show, Read)

data TopDef
    = FnDef Type PIdent [Arg] Block
    | ClassDef ClassHeader [ClassField]
    | StructDef StructHeader [StructField]
  deriving (Eq, Ord, Show, Read)

data Arg = Arg Type PIdent
  deriving (Eq, Ord, Show, Read)

data ClassHeader = ClassDec PUIdent | ClassDecExt PUIdent Type
  deriving (Eq, Ord, Show, Read)

data ClassField = ClassFieldVar Type [Item] | ClassFieldMeth TopDef
  deriving (Eq, Ord, Show, Read)

data StructHeader = StructDec PIdent
  deriving (Eq, Ord, Show, Read)

data StructField = StructField Type [Item]
  deriving (Eq, Ord, Show, Read)

data Block = Block [Stmt]
  deriving (Eq, Ord, Show, Read)

data Stmt
    = Empty
    | BStmt Block
    | Decl Type [Item]
    | Ass PIdent Expr
    | ArrAss PIdent DimExpr Expr
    | StructAss PIdent PIdent Expr
    | Incr PIdent
    | Decr PIdent
    | Ret Expr
    | VRet
    | Cond Expr Stmt
    | CondElse Expr Stmt Stmt
    | While Expr Stmt
    | For Type PIdent PIdent Stmt
    | SExp Expr
  deriving (Eq, Ord, Show, Read)

data Item = NoInit PIdent | Init PIdent Expr
  deriving (Eq, Ord, Show, Read)

data Type
    = Int
    | Str
    | Bool
    | Void
    | Arr Type
    | Class PUIdent
    | Struct PIdent
    | Fun Type [Type]
  deriving (Eq, Ord, Show, Read)

data Expr
    = EVar PIdent
    | ELitInt Integer
    | ELitTrue
    | ELitFalse
    | EApp PIdent [Expr]
    | EAppMeth PIdent PIdent [Expr]
    | EObjVar PIdent PIdent
    | ENewArr Type DimExpr
    | ENewObj PUIdent
    | ENewSObj PIdent
    | EArrElem PIdent DimExpr
    | EString String
    | ENullSim PIdent
    | ENullCl PUIdent
    | Neg Expr
    | Not Expr
    | EMul Expr MulOp Expr
    | EAdd Expr AddOp Expr
    | ERel Expr RelOp Expr
    | EAnd Expr Expr
    | EOr Expr Expr
  deriving (Eq, Ord, Show, Read)

data DimExpr = EDim Expr
  deriving (Eq, Ord, Show, Read)

data AddOp = Plus | Minus
  deriving (Eq, Ord, Show, Read)

data MulOp = Times | Div | Mod
  deriving (Eq, Ord, Show, Read)

data RelOp = LTH | LE | GTH | GE | EQU | NE
  deriving (Eq, Ord, Show, Read)

