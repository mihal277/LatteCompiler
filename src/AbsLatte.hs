

module AbsLatte where

-- Haskell module generated by the BNF converter




newtype Ident = Ident String deriving (Eq, Ord, Show, Read)
newtype UIdent = UIdent String deriving (Eq, Ord, Show, Read)
data Program = Program [TopDef]
  deriving (Eq, Ord, Show, Read)

data TopDef
    = FnDef Type Ident [Arg] Block
    | ClassDef ClassHeader [ClassField]
    | StructDef StructHeader [StructField]
  deriving (Eq, Ord, Show, Read)

data Arg = Arg Type Ident
  deriving (Eq, Ord, Show, Read)

data ClassHeader = ClassDec UIdent | ClassDecExt UIdent Type
  deriving (Eq, Ord, Show, Read)

data ClassField = ClassFieldVar Type [Item] | ClassFieldMeth TopDef
  deriving (Eq, Ord, Show, Read)

data StructHeader = StructDec Ident
  deriving (Eq, Ord, Show, Read)

data StructField = StructField Type [Item]
  deriving (Eq, Ord, Show, Read)

data Block = Block [Stmt]
  deriving (Eq, Ord, Show, Read)

data Stmt
    = Empty
    | BStmt Block
    | Decl Type [Item]
    | Ass Ident Expr
    | ArrAss Ident DimExpr Expr
    | StructAss Ident Ident Expr
    | Incr Ident
    | Decr Ident
    | Ret Expr
    | VRet
    | Cond Expr Stmt
    | CondElse Expr Stmt Stmt
    | While Expr Stmt
    | For Type Ident Ident Stmt
    | SExp Expr
  deriving (Eq, Ord, Show, Read)

data Item = NoInit Ident | Init Ident Expr
  deriving (Eq, Ord, Show, Read)

data Type
    = Int
    | Str
    | Bool
    | Void
    | Arr Type
    | Class UIdent
    | Struct Ident
    | Fun Type [Type]
  deriving (Eq, Ord, Show, Read)

data Expr
    = EVar Ident
    | ELitInt Integer
    | ELitTrue
    | ELitFalse
    | EApp Ident [Expr]
    | EAppMeth Ident Ident [Expr]
    | EObjVar Ident Ident
    | ENewArr Type DimExpr
    | ENewObj UIdent
    | ENewSObj Ident
    | EArrElem Ident DimExpr
    | EString String
    | ENullSim Ident
    | ENullCl UIdent
    | Neg Expr
    | Not Expr
    | EMul Expr MulOp Expr
    | EAdd Expr AddOp Expr
    | ERel Expr RelOp Expr
    | EAnd Expr Expr
    | EOr Expr Expr
  deriving (Eq, Ord, Show, Read)

data DimExpr = EDim Expr
  deriving (Eq, Ord, Show, Read)

data AddOp = Plus | Minus
  deriving (Eq, Ord, Show, Read)

data MulOp = Times | Div | Mod
  deriving (Eq, Ord, Show, Read)

data RelOp = LTH | LE | GTH | GE | EQU | NE
  deriving (Eq, Ord, Show, Read)

